{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "ISlash",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#arrays"
		},
		{
			"include": "#comments"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.islash",
					"match": "\\b(set|add|sub|mult|div|mod|root|power|increment|decrement|greater|greaterequal|less|lessequal|not|and|or|equal|notequal|concat|length|getchar|say|input|break|accessindex|append|preppend|rangearray|removefirst|removelast|swap|setindex|random)\\b"
				},
				{
					"name": "entity.name.function.islash",
					"match": "\\b(if|else|endif|while|endwhile|foreach|endforeach)\\b"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "entity.name.type.emptyArrays.islash",
					"match": "\\[\\]\\b(number|string)\\b"
				},
				{
					"name": "variable.name.islash",
					"match": "\\b([a-zA-Z_$][a-zA-Z_$0-9]*)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.islash",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.islash",
					"match": "\\\\."
				},
				{
					"name": "variable.parameter.interpolated.islash",
					"match": "\\$\\([^\\)]*\\)"
				}
			]
		},
		"numbers": {
			"name": "constant.numeric.islash",
			"match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)"
		},
		"arrays": {
			"begin": "\\[",
			"end": "\\]",
			"patterns": [
				{
					"include": "#variables"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#strings"
				},
				{
					"name": "???",
					"match": ","
				}
			]
		},
		"comments": {
			"name": "comment.line.number-sign.islash",
			"begin": "#",
			"end": "\\n"
		}
	},
	"scopeName": "text.islash"
}