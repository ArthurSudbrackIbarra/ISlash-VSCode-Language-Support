{
	"set": {
		"scope": "islash",
		"prefix": "set",
		"body": [
			"set x 0"
		],
		"description": "Sets/declares variables."
	},
	"add": {
		"scope": "islash",
		"prefix": "add",
		"body": [
			"add num1 num2 varToStore"
		],
		"description": "'+' operator."
	},
	"sub": {
		"scope": "islash",
		"prefix": "sub",
		"body": [
			"sub num1 num2 varToStore"
		],
		"description": "'-' operator."
	},
	"mult": {
		"scope": "islash",
		"prefix": "mult",
		"body": [
			"mult num1 num2 varToStore"
		],
		"description": "'*' operator."
	},
	"div": {
		"scope": "islash",
		"prefix": "div",
		"body": [
			"div num1 num2 varToStore"
		],
		"description": "'\\' operator numbers."
	},
	"mod": {
		"scope": "islash",
		"prefix": "mod",
		"body": [
			"mod num1 num2 varToStore"
		],
		"description": "'%' operator."
	},
	"power": {
		"scope": "islash",
		"prefix": "power",
		"body": [
			"power num1 2 varToStore"
		],
		"description": "'^' operator."
	},
	"root": {
		"scope": "islash",
		"prefix": "root",
		"body": [
			"root num1 2 varToStore"
		],
		"description": "Square roots, cubic roots...."
	},
	"increment": {
		"scope": "islash",
		"prefix": "increment",
		"body": [
			"increment myVar"
		],
		"description": "Adds 1 to the number."
	},
	"decrement": {
		"scope": "islash",
		"prefix": "decrement",
		"body": [
			"decrement myVar"
		],
		"description": "Subtracts 1 from the number."
	},
	"greater": {
		"scope": "islash",
		"prefix": "greater",
		"body": [
			"greater x y varToStore"
		],
		"description": "'>' Operator."
	},
	"greaterequal": {
		"scope": "islash",
		"prefix": "greaterequal",
		"body": [
			"greaterequal x y varToStore"
		],
		"description": "'>=' Operator."
	},
	"less": {
		"scope": "islash",
		"prefix": "less",
		"body": [
			"less x y varToStore"
		],
		"description": "'<' Operator."
	},
	"lessequal": {
		"scope": "islash",
		"prefix": "lessequal",
		"body": [
			"lessequal x y varToStore"
		],
		"description": "'<=' Operator."
	},
	"not": {
		"scope": "islash",
		"prefix": "not",
		"body": [
			"not x varToStore"
		],
		"description": "'!' Operator."
	},
	"and": {
		"scope": "islash",
		"prefix": "and",
		"body": [
			"and x y varToStore"
		],
		"description": "'&&' Operator."
	},
	"or": {
		"scope": "islash",
		"prefix": "or",
		"body": [
			"or x y varToStore"
		],
		"description": "'||' Operator."
	},
	"if": {
		"scope": "islash",
		"prefix": "if",
		"body": [
			"if x\n\t\nendif"
		],
		"description": "If statement."
	},
	"else": {
		"scope": "islash",
		"prefix": "else",
		"body": [
			"else"
		],
		"description": "Else statement."
	},
	"endif": {
		"scope": "islash",
		"prefix": "endif",
		"body": [
			"endif"
		],
		"description": "Closes if blocks."
	},
	"equal": {
		"scope": "islash",
		"prefix": "equal",
		"body": [
			"equal x y varToStore"
		],
		"description": "'==' Operator."
	},
	"notequal": {
		"scope": "islash",
		"prefix": "notequal",
		"body": [
			"notequal x y varToStore"
		],
		"description": "'!=' Operator."
	},
	"length": {
		"scope": "islash",
		"prefix": "length",
		"body": [
			"length strOrArray varToStore"
		],
		"description": "Gets the length of a string or an array."
	},
	"getchar": {
		"scope": "islash",
		"prefix": "getchar",
		"body": [
			"getchar str index varToStore"
		],
		"description": "Gets the nth char of a string."
	},
	"concat": {
		"scope": "islash",
		"prefix": "concat",
		"body": [
			"concat str1 str2"
		],
		"description": "Concatenates strings."
	},
	"say": {
		"scope": "islash",
		"prefix": "say",
		"body": [
			"say \"\""
		],
		"description": "Prints to screen."
	},
	"input": {
		"scope": "islash",
		"prefix": "input",
		"body": [
			"input x \"\""
		],
		"description": "Gets user input."
	},
	"while": {
		"scope": "islash",
		"prefix": "while",
		"body": [
			"while x\n\t\nendwhile"
		],
		"description": "While statements."
	},
	"endwhile": {
		"scope": "islash",
		"prefix": "endwhile",
		"body": [
			"endwhile"
		],
		"description": "Closes while blocks."
	},
	"break": {
		"scope": "islash",
		"prefix": "break",
		"body": [
			"break"
		],
		"description": "(Not Implemented Yet) Breaks while statements."
	},
	"accessindex": {
		"scope": "islash",
		"prefix": "accessindex",
		"body": [
			"accessindex array index varToStore"
		],
		"description": "Accesses array indexes."
	},
	"append": {
		"scope": "islash",
		"prefix": "append",
		"body": [
			"append array element"
		],
		"description": "Appends an element to an array."
	},
	"foreach": {
		"scope": "islash",
		"prefix": "foreach",
		"body": [
			"foreach element array\n\t\nendforeach"
		],
		"description": "Foreach statements."
	},
	"endforeach": {
		"scope": "islash",
		"prefix": "endforeach",
		"body": [
			"endforeach"
		],
		"description": "Closes foreach blocks."
	},
	"rangearray": {
		"scope": "islash",
		"prefix": "rangearray",
		"body": [
			"rangearray range varToStore"
		],
		"description": "Creates an array from 0 to (range - 1)."
	},
	"preppend": {
		"scope": "islash",
		"prefix": "preppend",
		"body": [
			"preppend array element"
		],
		"description": "Preppends an element to an array."
	},
	"removefirst": {
		"scope": "islash",
		"prefix": "removefirst",
		"body": [
			"removefirst array varToStore"
		],
		"description": "Removes the first element of an array."
	},
	"removelast": {
		"scope": "islash",
		"prefix": "removelast",
		"body": [
			"removelast array varToStore"
		],
		"description": "Removes the last element of an array."
	},
	"setindex": {
		"scope": "islash",
		"prefix": "setindex",
		"body": [
			"setindex array index element"
		],
		"description": "Changes the element at the specified array index."
	},
	"swap": {
		"scope": "islash",
		"prefix": "swap",
		"body": [
			"swap array index1 index2"
		],
		"description": "Swaps arrays positions."
	},
	"random": {
		"scope": "islash",
		"prefix": "random",
		"body": [
			"random 0 10 varToStore"
		],
		"description": "Generates a random integer value within the specified range."
	},
	"readfile": {
		"scope": "islash",
		"prefix": "readfile",
		"body": [
			"readfile \"filePath\" varToStore"
		],
		"description": "Reads a file, produces a string variable."
	},
	"readfilelines": {
		"scope": "islash",
		"prefix": "readfilelines",
		"body": [
			"readfilelines \"filePath\" varToStore"
		],
		"description": "Reads a file line by line, produces a string[] variable."
	},
	"writefile": {
		"scope": "islash",
		"prefix": "writefile",
		"body": [
			"writefile \"filePath\" content"
		],
		"description": "Writes to a file, overrides previous content."
	},
	"split": {
		"scope": "islash",
		"prefix": "split",
		"body": [
			"split str pattern varToStore"
		],
		"description": "Splits a string using a pattern, produces a string[] variable."
	},
	"upper": {
		"scope": "islash",
		"prefix": "upper",
		"body": [
			"upper str varToStore"
		],
		"description": "Turn strings into uppercase."
	},
	"lower": {
		"scope": "islash",
		"prefix": "lower",
		"body": [
			"lower str varToStore"
		],
		"description": "Turn strings into lowercase."
	},
	"contains": {
		"scope": "islash",
		"prefix": "contains",
		"body": [
			"contains strOrArray toFind varToStore"
		],
		"description": "Checks if a string contains a character or if an array contains an element."
	}
}